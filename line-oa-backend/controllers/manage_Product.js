const db = require("../db");
const express = require("express");
const app = express();
const cors = require("cors");
const multer = require("multer");
const line = require('@line/bot-sdk');

app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));


const config = {
    channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
    channelSecret: process.env.CHANNEL_SECRET,
};
const client = new line.Client(config);


// CREATE: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
exports.createProduct = async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û" });
        }

        const { name, price, description, ingredients } = req.body;
        if (!name || !description || !price || !ingredients) {
            return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
        }

        const imagePath = `/uploads/${req.file.filename}`;
        const ingredientsJson = JSON.stringify(ingredients); //  ‡πÅ‡∏õ‡∏•‡∏á JSON ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å

        const sql = "INSERT INTO Product (Product_Name, Price, Description, Product_image, Ingredients) VALUES (?, ?, ?, ?, ?)";
        const [result] = await db.query(sql, [name, price, description, imagePath, ingredientsJson]);

        res.status(201).json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", productId: result.insertId });
    } catch (error) {
        console.error("üö® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
    }
};


// READ: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.getAllProducts = async (req, res) => {
    try {
        const sql = "SELECT * FROM Product";
        const [products] = await db.query(sql);

        //  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ Ingredients ‡∏Å‡πà‡∏≠‡∏ô `JSON.parse()`
        const updatedProducts = products.map(p => {
            console.log("üîç ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Database:", p.Ingredients);

            let ingredientsArray = [];

            if (p.Ingredients) {
                if (typeof p.Ingredients === "string") {
                    try {
                        ingredientsArray = JSON.parse(p.Ingredients); //  ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô String
                    } catch (error) {
                        console.error("üö® JSON Parse Error:", error);
                    }
                } else if (typeof p.Ingredients === "object") {
                    ingredientsArray = p.Ingredients; //  ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Object ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á
                }
            }

            return {
                ...p,
                Ingredients: ingredientsArray
            };
        });

        res.status(200).json(updatedProducts);
    } catch (error) {
        console.error("üö® ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
    }
};



// READ: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° ID
exports.getProductById = async (req, res) => {
     
    try {
        const { id } = req.params;
        const [product] = await db.query("SELECT * FROM Product WHERE Product_ID = ?", id);
       
        if (product.length === 0) {
            return res.status(404).json({ message: "Product not found" });
        }
        res.status(200).json(product[0]);
    } catch (error) {
        console.log(error)
    }
};

// UPDATE: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
exports.updateProduct = async (req, res) => {
    try {
        const { id } = req.params;
        const { name, price, description, ingredients } = req.body; //  ‡∏£‡∏±‡∏ö ingredients ‡∏à‡∏≤‡∏Å request

        // üîπ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô
        const [existingProduct] = await db.query("SELECT Product_image FROM Product WHERE Product_ID = ?", [id]);

        if (existingProduct.length === 0) {
            return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
        }

        let imagePath = existingProduct[0].Product_image; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà

        if (req.file) {
            imagePath = `/uploads/${req.file.filename}`; //  ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        }

        //  ‡πÅ‡∏õ‡∏•‡∏á Ingredients ‡πÄ‡∏õ‡πá‡∏ô JSON String
        const ingredientsJSON = ingredients ? JSON.stringify(JSON.parse(ingredients)) : null;

        //  ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        const sql = "UPDATE Product SET Product_Name = ?, Price = ?, Description = ?, Product_image = ?, Ingredients = ? WHERE Product_ID = ?";
        const [product] = await db.query(sql, [name, price, description, imagePath, ingredientsJSON, id]);

        if (product.affectedRows === 0) {
            return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
        }

        res.status(200).json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", imagePath });

    } catch (error) {
        console.error("üö® ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
    }
};





// DELETE: ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
exports.deleteProduct = async (req, res) => {
    try {
        const { id } = req.params;
        const [product] = await db.query("DELETE FROM Product WHERE Product_ID = ?", [id]);

        if (product.affectedRows === 0) {
            return res.status(404).json({ message: "Product not found" });
        }
        res.status(200).json({ message: "Product deleted successfully" });
        
    } catch (error) {
        console.log(error)
    }
    
};

exports.generateProductMenu = async () => {
    try {
        const [products] = await db.query("SELECT Product_Name, Price, Description, Product_image FROM Product LIMIT 6");

        if (products.length === 0) {
            return null; //  ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ `null`
        }

        //  ‡∏™‡∏£‡πâ‡∏≤‡∏á Flex Message
        const flexMessage = {
            type: "flex",
            altText: "‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
            contents: {
                type: "carousel",
                contents: products.map(product => ({
                    type: "bubble",
                    hero: {
                        type: "image",
                        url: `https://9d33-58-8-92-226.ngrok-free.app${product.Product_image}`,
                        size: "full",
                        aspectRatio: "20:13",
                        aspectMode: "cover"
                    },
                    body: {
                        type: "box",
                        layout: "vertical",
                        contents: [
                            {
                                type: "text",
                                text: product.Product_Name,
                                weight: "bold",
                                size: "xl"
                            },
                            {
                                type: "text",
                                text: `‡∏ø${product.Price}`,
                                size: "md",
                                color: "#FF0000"
                            },
                            {
                                type: "text",
                                text: product.Description,
                                size: "sm",
                                wrap: true,
                                color: "#666666"
                            }
                        ]
                    }
                }))
            }
        };

        return flexMessage;
    } catch (error) {
        console.error("üö® ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ:", error);
        return null;
    }
};

exports.sendProductsToLine = async (req, res = null) => {
    try {
        console.log("‚úÖ sendProductsToLine ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");

        const flexMessage = await exports.generateProductMenu();
        if (!flexMessage) {
            console.log("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤");
            return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
        }

        console.log("üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE OA...");

        const [recipients] = await db.query("SELECT Customer_ID FROM Customer");

        if (!recipients || recipients.length === 0) {
            console.log("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
            return res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" });
        }

        //  ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
        for (const recipient of recipients) {
            console.log(`üì§ ‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á: ${recipient.Customer_ID}`);
            await client.pushMessage(recipient.Customer_ID, flexMessage);
        }

        console.log("‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE OA ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
        res.status(200).json({ message: "‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
    } catch (error) {
        console.error("üö® ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ:", error);
        res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE" });
    }
};