const express = require("express");
const db = require('../db');
const app = express();
const cors = require("cors");
require('dotenv').config();
const axios = require("axios");

exports.createIngredient = async (req, res) => {
    try {
        console.log("üì¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å React:", req.body);

        const { Ingredient_Name, Quantity, Low_stock_threshold, EXP_date } = req.body;

        if (!Ingredient_Name || Quantity === undefined || Low_stock_threshold === undefined || !EXP_date) {
            return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
        }

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Ingredient ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const [existingIngredient] = await db.query(
            "SELECT Ingredient_ID, Quantity FROM Ingredient WHERE Ingredient_Name = ?",
            [Ingredient_Name]
        );

        let ingredientId;
        if (existingIngredient.length > 0) {
            // üü¢ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏ö‡∏ß‡∏Å Quantity ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ (‡πÉ‡∏ä‡πâ Number() ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô)
            ingredientId = existingIngredient[0].Ingredient_ID;
            const newTotalQuantity = Number(existingIngredient[0].Quantity) + Number(Quantity);

            await db.query(
                "UPDATE Ingredient SET Quantity = ? WHERE Ingredient_ID = ?",
                [newTotalQuantity, ingredientId]
            );
        } else {
            // üîµ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤ Ingredient
            const sqlInsertIngredient = "INSERT INTO Ingredient (Ingredient_Name, Quantity, Low_stock_threshold) VALUES (?, ?, ?)";
            const [result] = await db.query(sqlInsertIngredient, [Ingredient_Name, Quantity, Low_stock_threshold]);
            ingredientId = result.insertId;
        }

        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡πá‡∏≠‡∏ï‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô Ingredient_Item
        const batchCode = `BATCH-${ingredientId}-${Date.now()}`;
        const sqlInsertBatch = "INSERT INTO Ingredient_Item (Ingredient_ID, Batch_code, Quantity, EXP_date, Updated_at) VALUES (?, ?, ?, ?, NOW())";
        await db.query(sqlInsertBatch, [ingredientId, batchCode, Quantity, EXP_date]);

        res.status(201).json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", ingredientId });

    } catch (error) {
        console.error("üö® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
    }
};




exports.getIngredients = async (req, res) => {
    try {
        const sql = "SELECT Ingredient_ID, Ingredient_Name, Quantity, Low_stock_threshold FROM Ingredient";
        const [ingredients] = await db.query(sql);

        // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏õ‡πá‡∏ô number ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        const updatedIngredients = ingredients.map(ingre => ({
            ...ingre,
            Quantity: Number(ingre.Quantity), // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            Low_stock_threshold: Number(ingre.Low_stock_threshold),
            isLowStock: Number(ingre.Quantity) < Number(ingre.Low_stock_threshold),
        }));

        console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ React:", updatedIngredients);
        res.status(200).json(updatedIngredients);
    } catch (error) {
        console.error("üö® ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
    }
};




exports.deleteIngredient = async (req, res) => {
    try {
        const { id } = req.params;

        // ‚úÖ ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Ingredient_Item ‡∏Å‡πà‡∏≠‡∏ô
        const sqlDeleteItems = "DELETE FROM Ingredient_Item WHERE Ingredient_ID = ?";
        await db.query(sqlDeleteItems, [id]);

        // ‚úÖ ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Ingredient
        const sqlDeleteIngredient = "DELETE FROM Ingredient WHERE Ingredient_ID = ?";
        await db.query(sqlDeleteIngredient, [id]);

        res.status(200).json({ message: "‡∏•‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
    } catch (error) {
        console.error("üö® ‡∏•‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
    }
};


