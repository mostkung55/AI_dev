const express = require("express");
const db = require('../db');
const app = express();
const cors = require("cors");
require('dotenv').config();
const axios = require("axios");
const line = require('@line/bot-sdk');

const config = {
    channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN,
    channelSecret: process.env.CHANNEL_SECRET,
};

const client = new line.Client(config);


// üìå GET: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô Order ‡∏ï‡∏≤‡∏° Order_ID
exports.getItem = async (req, res) => {
    try {
        const { orderId } = req.params;
        if (!orderId) {
            return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Order_ID" });
        }

        const [items] = await db.query(`
            SELECT Product.Product_name, 
                   Product.Price, 
                   Order_Item.Quantity, 
                   (Product.Price * Order_Item.Quantity) AS Subtotal,
                   Order_Item.Status,
                   Order_Item.Order_ItemID
            FROM Order_Item
            JOIN Product ON Order_Item.Product_ID = Product.Product_ID
            WHERE Order_Item.Order_ID = ?`, [orderId]); 
        
        console.log("üì¢ Order Items:", items);
        res.status(200).json(items);
    } catch (error) {
        console.error("üö® Error fetching order items:", error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
    }
};
const notifyCustomer = async (customerId, status) => {
    if (!customerId) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ Customer_ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤");
        return;
    }

    console.log(`üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${customerId} ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà: ${status}`);

    let message = "";
    switch (status) {
        case "Preparing":
            message = "‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°!";
            break;
        case "Delivering":
            message = "üöö ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏™‡πà‡∏á!";
            break;
        case "Completed":
            message = "üéâ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏±‡∏ö üòä";
            break;
        case "Paid":
            message = "üí∞ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!";
            break;
        default:
            message = `üì¢ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô: ${status}`;
    }

    try {
        await client.pushMessage(customerId, { type: "text", text: message });
        console.log(`‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${customerId}`);
    } catch (error) {
        console.error("‚ùå Error sending notification to customer:", error);
    }
};

// üìå PUT: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô Order Item ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Order
exports.updateItemStatus = async (req, res) => {
    const { orderItemId } = req.params;
    const { status } = req.body;

    try {
        console.log(`üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Order_ItemID: ${orderItemId} ‡πÄ‡∏õ‡πá‡∏ô ${status}`);

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Order Item
        await db.query("UPDATE Order_Item SET Status = ? WHERE Order_ItemID = ?", [status, orderItemId]);

        // ‚úÖ ‡∏î‡∏∂‡∏á Order ID ‡∏Ç‡∏≠‡∏á Order Item ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        const [orderData] = await db.query("SELECT Order_ID FROM Order_Item WHERE Order_ItemID = ?", [orderItemId]);
        if (orderData.length === 0) {
            return res.status(404).json({ error: "Order item not found" });
        }
        const orderId = orderData[0].Order_ID;

        // ‚úÖ ‡∏î‡∏∂‡∏á Customer_ID ‡∏Ç‡∏≠‡∏á Order
        const [customerData] = await db.query("SELECT Customer_ID FROM `Order` WHERE Order_ID = ?", [orderId]);
        if (customerData.length === 0) {
            return res.status(404).json({ error: "Customer not found" });
        }
        const customerId = customerData[0].Customer_ID;

        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Order Items ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏±‡πâ‡∏ô
        const [items] = await db.query("SELECT Status FROM Order_Item WHERE Order_ID = ?", [orderId]);
        const statuses = items.map(item => item.Status);
        console.log(`üì¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á Order ${orderId}:`, statuses);

        // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á Order ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Order Items
        let newOrderStatus = "Preparing";

        if (statuses.every(s => s === "Completed")) {
            newOrderStatus = "Completed";
        } else if (statuses.every(s => s === "Paid")) {
            newOrderStatus = "Paid";
        } else if (statuses.every(s => s === "Delivering")) {
            newOrderStatus = "Delivering";
        } else if (statuses.includes("Preparing")) {
            newOrderStatus = "Preparing";
        }

        console.log(`‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Order ${orderId} ‡πÄ‡∏õ‡πá‡∏ô ${newOrderStatus}`);
        
        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Order
        await db.query("UPDATE `Order` SET status = ? WHERE Order_ID = ?", [newOrderStatus, orderId]);

        // ‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠ **‡∏ó‡∏∏‡∏Å OrderItem ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô**
        if (statuses.every(s => s === newOrderStatus)) {
            await notifyCustomer(customerId, newOrderStatus);
        }

        res.status(200).json({ message: `‚úÖ Order Item ${orderItemId} updated to ${status}, Order ${orderId} updated to ${newOrderStatus}` });
    } catch (err) {
        console.error("üö® Error updating item status:", err);
        res.status(500).json({ error: "Failed to update item status" });
    }
};






// üìå PUT: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Order
exports.updateOrderStatus = async (req, res) => {
    try {
        const { orderId } = req.params;
        const { status } = req.body;

        if (!status) {
            return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Status" });
        }

        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Status ‡∏Ç‡∏≠‡∏á Order
        await db.query("UPDATE `Order` SET Status = ? WHERE Order_ID = ?", [status, orderId]);

        res.status(200).json({ message: `‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Order ${orderId} ‡πÄ‡∏õ‡πá‡∏ô ${status} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!` });
    } catch (error) {
        console.error("üö® Error updating order status:", error);
        res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Order" });
    }
};

