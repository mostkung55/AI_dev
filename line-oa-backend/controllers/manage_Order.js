const express = require("express");
const db = require('../db');
const app = express();
const cors = require("cors");
require('dotenv').config();
const axios = require("axios");


// GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.getOrder = async (req, res) => {
  try {
    const [orders] = await db.query("SELECT * FROM `Order`"); // ‚úÖ ‡πÉ‡∏™‡πà Backtick (`) ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Error
    res.status(200).json(orders);
  } catch (error) {
    console.error("üö® ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
};

// CREATE: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà
exports.createOrder = async (req, res) => {
  try {
    const { Customer_ID, Customer_Address, Total_Amount, Status } = req.body;

    const Created_at = new Date().toISOString().slice(0, 19).replace('T', ' ');

    if (!Customer_ID || !Customer_Address || !Total_Amount || !Status) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    const sql = "INSERT INTO `Order` (Customer_ID, Customer_Address, Total_Amount, Created_at, Status) VALUES (?, ?, ?, ?, ?)";
    const [result] = await db.query(sql, [Customer_ID, Customer_Address, Total_Amount, Created_at, Status]);

    res.status(201).json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", orderId: result.insertId });
  } catch (error) {
    console.error("üö® ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
};


exports.updateOrderStatus = async (req, res) => {
    try {
      const { id } = req.params;
      const { Status } = req.body;
  
      if (!Status) {
        return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (Status)" });
      }
  
      const sql = "UPDATE `Order` SET Status = ? WHERE Order_ID = ?";
      await db.query(sql, [Status, id]);
  
      res.status(200).json({ message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
    } catch (error) {
      console.error("üö® Error updating order status:", error);
      res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" });
    }
  };

  // DELETE: ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
exports.deleteOrder = async (req, res) => {
    try {
      const { id } = req.params;
  
      if (!id) {
        return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ Order_ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö" });
      }
  
      const sql = "DELETE FROM `Order` WHERE Order_ID = ?";
      const [result] = await db.query(sql, [id]);
  
      if (result.affectedRows === 0) {
        return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö" });
      }
  
      res.status(200).json({ message: "‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" });
    } catch (error) {
      console.error("üö® Error deleting order:", error);
      res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠" });
    }
  };

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Order
  exports.checkIngredientsAvailability = async (orderItems) => {
    let insufficientIngredients = [];

    for (let item of orderItems) {
        const [product] = await db.query(
            "SELECT Ingredients FROM Product WHERE Product_ID = ?", 
            [item.product_id]
        );

        if (product.length === 0) {
            return { success: false, message: `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${item.product_id}` };
        }

        let ingredients = [];

        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Ingredients ‡πÄ‡∏õ‡πá‡∏ô JSON String ‡∏´‡∏£‡∏∑‡∏≠ Object
        if (typeof product[0].Ingredients === "string") {
            try {
                ingredients = JSON.parse(product[0].Ingredients); // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô String
            } catch (error) {
                console.error("üö® JSON Parse Error (Ingredients):", error);
                return { success: false, message: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ingredients ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" };
            }
        } else if (typeof product[0].Ingredients === "object" && product[0].Ingredients !== null) {
            ingredients = product[0].Ingredients; // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Object ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
        } else {
            ingredients = []; // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏ß‡πà‡∏≤‡∏á
        }

        for (let ing of ingredients) {
            const [ingredient] = await db.query(
                "SELECT Quantity FROM Ingredient WHERE Ingredient_ID = ?", 
                [ing.id]
            );

            if (ingredient.length === 0) {
                return { success: false, message: `‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ${ing.name}` };
            }

            if (ingredient[0].Quantity < ing.quantity * item.quantity) {
                insufficientIngredients.push({ 
                    name: ing.name, 
                    required: ing.quantity * item.quantity, 
                    available: ingredient[0].Quantity 
                });
            }
        }
    }

    if (insufficientIngredients.length > 0) {
        return {
            success: false,
            message: "‚ùå ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠:\n" + insufficientIngredients.map(ing => `- ${ing.name}: ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ${ing.required}, ‡∏°‡∏µ ${ing.available}`).join("\n")
        };
    }

    return { success: true };
};


// ‚úÖ ‡∏´‡∏±‡∏Å‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Stock ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
exports.deductIngredientsFromStock = async (orderItems) => {
  for (let item of orderItems) {
      const [product] = await db.query(
          "SELECT Ingredients FROM Product WHERE Product_ID = ?", 
          [item.product_id]
      );

      // console.log(" ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Database (Ingredients):", product[0].Ingredients); // ‚úÖ Debug

      let ingredients = [];

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Ingredients ‡πÄ‡∏õ‡πá‡∏ô JSON String ‡∏´‡∏£‡∏∑‡∏≠ Object
      if (typeof product[0].Ingredients === "string") {
          try {
              ingredients = JSON.parse(product[0].Ingredients); // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô String
          } catch (error) {
              console.error("üö® JSON Parse Error (Ingredients):", error);
              return { success: false, message: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Ingredients ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" };
          }
      } else if (typeof product[0].Ingredients === "object" && product[0].Ingredients !== null) {
          ingredients = product[0].Ingredients; // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Object ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
      } else {
          ingredients = []; // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Array ‡∏ß‡πà‡∏≤‡∏á
      }

      for (let ing of ingredients) {
          await db.query(
              "UPDATE Ingredient SET Quantity = Quantity - ? WHERE Ingredient_ID = ?", 
              [ing.quantity * item.quantity, ing.id]
          );
      }
  }
};
